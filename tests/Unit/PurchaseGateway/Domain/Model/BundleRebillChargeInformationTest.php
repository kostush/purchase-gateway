<?php
declare(strict_types=1);

namespace Tests\Unit\PurchaseGateway\Domain\Model;

use ProBillerNG\PurchaseGateway\Domain\Model\Amount;
use ProBillerNG\PurchaseGateway\Domain\Model\BundleRebillChargeInformation;
use ProBillerNG\PurchaseGateway\Domain\Model\BundleSingleChargeInformation;
use ProBillerNG\PurchaseGateway\Domain\Model\Duration;
use ProBillerNG\PurchaseGateway\Domain\Model\Exception\InvalidAmountException;
use ProBillerNG\PurchaseGateway\Domain\Model\TaxBreakdown;
use ProBillerNG\PurchaseGateway\Exception;
use Tests\UnitTestCase;

class BundleRebillChargeInformationTest extends UnitTestCase
{
    private const INITIAL_AMOUNT_VALUE = 15.55;

    private const REBILL_AMOUNT_VALUE = 14.44;

    private const INITIAL_DURATION_VALUE = 30;

    private const REBILL_DURATION_VALUE = 365;

    private const INITIAL_TAX_VALUES = ['beforeTaxes' => 1.11, 'taxes' => 2.11, 'afterTaxes' => 15.55];

    private const REBILL_TAX_VALUES = ['beforeTaxes' => 11.11, 'taxes' => 22.11, 'afterTaxes' => 14.44];

    /**
     * @var Amount
     */
    private $initialAmount;

    /**
     * @var Duration
     */
    private $validFor;

    /**
     * @var TaxBreakdown
     */
    private $initialTaxBreakdown;

    /**
     * @var Amount
     */
    private $rebillAmount;

    /**
     * @var Duration
     */
    private $repeatEvery;

    /**
     * @var TaxBreakdown
     */
    private $rebillTaxBreakdown;

    /**
     * @throws \ProBillerNG\Logger\Exception
     * @throws \ProBillerNG\PurchaseGateway\Domain\Model\Exception\InvalidAmountException
     * @return void
     */
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->initialAmount       = Amount::create(self::INITIAL_AMOUNT_VALUE);
        $this->validFor            = Duration::create(self::INITIAL_DURATION_VALUE);
        $this->initialTaxBreakdown = TaxBreakdown::create(
            Amount::create(self::INITIAL_TAX_VALUES['beforeTaxes']),
            Amount::create(self::INITIAL_TAX_VALUES['taxes']),
            Amount::create(self::INITIAL_TAX_VALUES['afterTaxes'])
        );

        $this->rebillAmount       = Amount::create(self::REBILL_AMOUNT_VALUE);
        $this->repeatEvery        = Duration::create(self::REBILL_DURATION_VALUE);
        $this->rebillTaxBreakdown = TaxBreakdown::create(
            Amount::create(self::REBILL_TAX_VALUES['beforeTaxes']),
            Amount::create(self::REBILL_TAX_VALUES['taxes']),
            Amount::create(self::REBILL_TAX_VALUES['afterTaxes'])
        );
    }

    /**
     * @test
     * @throws \Exception
     * @return BundleRebillChargeInformation
     */
    public function it_should_return_a_bundle_rebill_charge_information_object(): BundleRebillChargeInformation
    {
        $result = BundleRebillChargeInformation::create(
            $this->initialAmount,
            $this->validFor,
            $this->initialTaxBreakdown,
            $this->rebillAmount,
            $this->repeatEvery,
            $this->rebillTaxBreakdown
        );

        $this->assertInstanceOf(BundleRebillChargeInformation::class, $result);

        return $result;
    }

    /**
     * @test
     * @depends it_should_return_a_bundle_rebill_charge_information_object
     * @param BundleRebillChargeInformation $information The charge information
     * @return BundleRebillChargeInformation
     */
    public function it_should_return_an_object_with_an_initial_amount_property(
        BundleRebillChargeInformation $information
    ): BundleRebillChargeInformation {
        $this->assertInstanceOf(Amount::class, $information->initialAmount());
        return $information;
    }

    /**
     * @test
     * @depends it_should_return_a_bundle_rebill_charge_information_object
     * @param BundleRebillChargeInformation $information The charge information
     * @return void
     */
    public function it_should_return_an_object_with_the_correct_initial_amount(BundleRebillChargeInformation $information): void
    {
        $this->assertSame(self::INITIAL_AMOUNT_VALUE, $information->initialAmount()->value());
    }

    /**
     * @test
     * @depends it_should_return_a_bundle_rebill_charge_information_object
     * @param BundleRebillChargeInformation $information The charge information
     * @return BundleRebillChargeInformation
     */
    public function it_should_return_an_object_with_an_rebill_amount_property(
        BundleRebillChargeInformation $information
    ): BundleRebillChargeInformation {
        $this->assertInstanceOf(Amount::class, $information->rebillAmount());
        return $information;
    }

    /**
     * @test
     * @depends it_should_return_a_bundle_rebill_charge_information_object
     * @param BundleRebillChargeInformation $information The charge information
     * @return void
     */
    public function it_should_return_an_object_with_the_correct_rebill_amount(BundleRebillChargeInformation $information): void
    {
        $this->assertSame(self::REBILL_AMOUNT_VALUE, $information->rebillAmount()->value());
    }

    /**
     * @test
     * @depends it_should_return_a_bundle_rebill_charge_information_object
     * @param BundleRebillChargeInformation $information The charge information
     * @return BundleRebillChargeInformation
     */
    public function it_should_return_an_object_with_a_valid_for_duration_property(
        BundleRebillChargeInformation $information
    ): BundleRebillChargeInformation {
        $this->assertInstanceOf(Duration::class, $information->validFor());
        return $information;
    }

    /**
     * @test
     * @depends it_should_return_a_bundle_rebill_charge_information_object
     * @param BundleRebillChargeInformation $information The charge information
     * @return void
     */
    public function it_should_return_an_object_with_the_correct_valid_for_duration(
        BundleRebillChargeInformation $information
    ): void {
        $this->assertSame(self::INITIAL_DURATION_VALUE, $information->validFor()->days());
    }

    /**
     * @test
     * @depends it_should_return_a_bundle_rebill_charge_information_object
     * @param BundleRebillChargeInformation $information The charge information
     * @return BundleRebillChargeInformation
     */
    public function it_should_return_an_object_with_a_repeat_every_duration_property(
        BundleRebillChargeInformation $information
    ): BundleRebillChargeInformation {
        $this->assertInstanceOf(Duration::class, $information->repeatEvery());
        return $information;
    }

    /**
     * @test
     * @depends it_should_return_a_bundle_rebill_charge_information_object
     * @param BundleRebillChargeInformation $information The charge information
     * @return void
     */
    public function it_should_return_an_object_with_the_correct_repeat_every_duration(
        BundleRebillChargeInformation $information
    ): void {
        $this->assertSame(self::REBILL_DURATION_VALUE, $information->repeatEvery()->days());
    }

    /**
     * @test
     * @depends it_should_return_a_bundle_rebill_charge_information_object
     * @param BundleRebillChargeInformation $information The charge information
     * @return BundleRebillChargeInformation
     */
    public function it_should_return_an_object_with_an_initial_tax_breakdown_property(
        BundleRebillChargeInformation $information
    ): BundleRebillChargeInformation {
        $this->assertInstanceOf(TaxBreakdown::class, $information->initialTaxBreakDown());
        return $information;
    }

    /**
     * @test
     * @depends it_should_return_an_object_with_an_initial_tax_breakdown_property
     * @param BundleRebillChargeInformation $information The charge information
     * @return void
     */
    public function it_should_return_an_object_with_the_correct_initial_tax_breakdown(
        BundleRebillChargeInformation $information
    ): void {
        $this->assertSame(self::INITIAL_TAX_VALUES['beforeTaxes'], $information->initialTaxBreakDown()->beforeTaxes()->value());
        $this->assertSame(self::INITIAL_TAX_VALUES['taxes'], $information->initialTaxBreakDown()->taxes()->value());
        $this->assertSame(self::INITIAL_TAX_VALUES['afterTaxes'], $information->initialTaxBreakDown()->afterTaxes()->value());
    }

    /**
     * @test
     * @depends it_should_return_a_bundle_rebill_charge_information_object
     * @param BundleRebillChargeInformation $information The charge information
     * @return BundleRebillChargeInformation
     */
    public function it_should_return_an_object_with_a_rebill_tax_breakdown_property(
        BundleRebillChargeInformation $information
    ): BundleRebillChargeInformation {
        $this->assertInstanceOf(TaxBreakdown::class, $information->rebillTaxBreakDown());
        return $information;
    }

    /**
     * @test
     * @depends it_should_return_an_object_with_a_rebill_tax_breakdown_property
     * @param BundleRebillChargeInformation $information The charge information
     * @return void
     */
    public function it_should_return_an_object_with_the_correct_rebill_tax_breakdown(
        BundleRebillChargeInformation $information
    ): void {
        $this->assertSame(self::REBILL_TAX_VALUES['beforeTaxes'], $information->rebillTaxBreakDown()->beforeTaxes()->value());
        $this->assertSame(self::REBILL_TAX_VALUES['taxes'], $information->rebillTaxBreakDown()->taxes()->value());
        $this->assertSame(self::REBILL_TAX_VALUES['afterTaxes'], $information->rebillTaxBreakDown()->afterTaxes()->value());
    }

    /**
     * @test
     * @depends it_should_return_a_bundle_rebill_charge_information_object
     * @param BundleRebillChargeInformation $information The charge information
     * @return void
     */
    public function to_array_should_return_an_array_with_all_the_class_property_values(
        BundleRebillChargeInformation $information
    ): void {
        $array = $information->fullTaxBreakDownArray();

        $this->assertArrayHasKey('initialAmount', $array);
        $this->assertArrayHasKey('rebillAmount', $array);
    }

    /**
     * @test
     * @throws InvalidAmountException
     * @throws \ProBillerNG\Logger\Exception
     * @return void
     */
    public function it_should_throw_exception_for_initial_amount_and_initial_after_taxes_amount_miss_match(): void
    {
        $this->expectException(InvalidAmountException::class);
        BundleRebillChargeInformation::create(
            Amount::create(2.22),
            $this->validFor,
            $this->initialTaxBreakdown,
            $this->rebillAmount,
            $this->repeatEvery,
            $this->rebillTaxBreakdown
        );
    }

    /**
     * @test
     * @throws InvalidAmountException
     * @throws \ProBillerNG\Logger\Exception
     * @return void
     */
    public function it_should_throw_exception_for_rebill_amount_and_rebill_after_taxes_amount_miss_match(): void
    {
        $this->expectException(InvalidAmountException::class);
        BundleRebillChargeInformation::create(
            $this->initialAmount,
            $this->validFor,
            $this->initialTaxBreakdown,
            Amount::create(1.25),
            $this->repeatEvery,
            $this->rebillTaxBreakdown
        );
    }
}
