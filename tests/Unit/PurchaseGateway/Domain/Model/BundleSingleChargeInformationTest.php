<?php
declare(strict_types=1);

namespace Tests\Unit\PurchaseGateway\Domain\Model;

use ProBillerNG\PurchaseGateway\Domain\Model\Amount;
use ProBillerNG\PurchaseGateway\Domain\Model\BundleSingleChargeInformation;
use ProBillerNG\PurchaseGateway\Domain\Model\Duration;
use ProBillerNG\PurchaseGateway\Domain\Model\Exception\InvalidAmountException;
use ProBillerNG\PurchaseGateway\Domain\Model\TaxBreakdown;
use Tests\UnitTestCase;

class BundleSingleChargeInformationTest extends UnitTestCase
{
    private const AMOUNT_VALUE = 15.55;

    private const DURATION_VALUE = 30;

    private const TAX_VALUES = ['beforeTaxes' => 1.11, 'taxes' => 2.11, 'afterTaxes' => 15.55];
    
    /**
     * @var Amount
     */
    private $amount;

    /**
     * @var Duration
     */
    private $duration;

    /**
     * @var TaxBreakdown
     */
    private $taxBreakdown;

    /**
     * @throws \ProBillerNG\Logger\Exception
     * @throws \ProBillerNG\PurchaseGateway\Domain\Model\Exception\InvalidAmountException
     * @throws \ReflectionException
     * @return void
     */
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->amount       = Amount::create(self::AMOUNT_VALUE);
        $this->duration     = Duration::create(self::DURATION_VALUE);
        $this->taxBreakdown = TaxBreakdown::create(
            Amount::create(self::TAX_VALUES['beforeTaxes']),
            Amount::create(self::TAX_VALUES['taxes']),
            Amount::create(self::TAX_VALUES['afterTaxes'])
        );
    }

    /**
     * @test
     * @throws \Exception
     * @return BundleSingleChargeInformation
     */
    public function it_should_return_a_bundle_single_charge_information_object(): BundleSingleChargeInformation
    {
        $result = BundleSingleChargeInformation::create($this->amount, $this->duration, $this->taxBreakdown);

        $this->assertInstanceOf(BundleSingleChargeInformation::class, $result);

        return $result;
    }

    /**
     * @test
     * @depends it_should_return_a_bundle_single_charge_information_object
     * @param BundleSingleChargeInformation $information The charge information
     * @return BundleSingleChargeInformation
     */
    public function it_should_return_an_object_with_an_amount_property(
        BundleSingleChargeInformation $information
    ): BundleSingleChargeInformation {
        $this->assertInstanceOf(Amount::class, $information->initialAmount());
        return $information;
    }

    /**
     * @test
     * @depends it_should_return_a_bundle_single_charge_information_object
     * @param BundleSingleChargeInformation $information The charge information
     * @return void
     */
    public function it_should_return_an_object_with_the_correct_amount(BundleSingleChargeInformation $information): void
    {
        $this->assertSame(self::AMOUNT_VALUE, $information->initialAmount()->value());
    }

    /**
     * @test
     * @depends it_should_return_a_bundle_single_charge_information_object
     * @param BundleSingleChargeInformation $information The charge information
     * @return BundleSingleChargeInformation
     */
    public function it_should_return_an_object_with_a_duration_property(
        BundleSingleChargeInformation $information
    ): BundleSingleChargeInformation {
        $this->assertInstanceOf(Duration::class, $information->validFor());
        return $information;
    }

    /**
     * @test
     * @depends it_should_return_a_bundle_single_charge_information_object
     * @param BundleSingleChargeInformation $information The charge information
     * @return void
     */
    public function it_should_return_an_object_with_the_correct_duration(
        BundleSingleChargeInformation $information
    ): void {
        $this->assertSame(self::DURATION_VALUE, $information->validFor()->days());
    }

    /**
     * @test
     * @depends it_should_return_a_bundle_single_charge_information_object
     * @param BundleSingleChargeInformation $information The charge information
     * @return BundleSingleChargeInformation
     */
    public function it_should_return_an_object_with_a_tax_breakdown_property(
        BundleSingleChargeInformation $information
    ): BundleSingleChargeInformation {
        $this->assertInstanceOf(TaxBreakdown::class, $information->initialTaxBreakDown());
        return $information;
    }

    /**
     * @test
     * @depends it_should_return_an_object_with_a_tax_breakdown_property
     * @param BundleSingleChargeInformation $information The charge information
     * @return void
     */
    public function it_should_return_an_object_with_the_correct_tax_breakdown(
        BundleSingleChargeInformation $information
    ): void {
        $this->assertSame(self::TAX_VALUES['beforeTaxes'], $information->initialTaxBreakDown()->beforeTaxes()->value());
        $this->assertSame(self::TAX_VALUES['taxes'], $information->initialTaxBreakDown()->taxes()->value());
        $this->assertSame(self::TAX_VALUES['afterTaxes'], $information->initialTaxBreakDown()->afterTaxes()->value());
    }

    /**
     * @test
     * @depends it_should_return_an_object_with_a_tax_breakdown_property
     * @param BundleSingleChargeInformation $information The charge information
     * @return void
     */
    public function full_tax_breakdown_array_should_return_an_array_with_the_initial_amount_taxes(
        BundleSingleChargeInformation $information
    ): void {
        $array = $information->fullTaxBreakDownArray();

        $this->assertArrayHasKey('initialAmount', $array);
    }

    /**
     * @test
     * @throws InvalidAmountException
     * @throws \ProBillerNG\Logger\Exception
     * @return void
     */
    public function it_should_throw_exception_for_amounts_miss_match(): void
    {
        $this->expectException(InvalidAmountException::class);
        BundleSingleChargeInformation::create(Amount::create(1.22), $this->duration, $this->taxBreakdown);
    }
}
