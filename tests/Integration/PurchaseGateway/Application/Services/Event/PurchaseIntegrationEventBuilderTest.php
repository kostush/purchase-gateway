<?php
/**
 * Created by PhpStorm.
 * User: r_damian
 * Date: 29.05.2020
 * Time: 4:33 PM
 */

namespace Tests\Integration\PurchaseGateway\Application\Services\Event;

use ProBillerNG\PurchaseGateway\Application\Exceptions\CannotCreateIntegrationEventException;
use ProBillerNG\PurchaseGateway\Application\Services\Event\EpochCCPurchaseImportEvent;
use ProBillerNG\PurchaseGateway\Application\Services\Event\EpochOtherPaymentPurchaseImportEvent;
use ProBillerNG\PurchaseGateway\Application\Services\Event\EpochPurchasedItemDetails;
use ProBillerNG\PurchaseGateway\Application\Services\Event\PurchaseIntegrationEventBuilder;
use ProBillerNG\PurchaseGateway\Application\Services\Event\RocketgateCC3DS2PurchaseImportEvent;
use ProBillerNG\PurchaseGateway\Application\Services\Event\RocketgateCC3DSPurchaseImportEvent;
use ProBillerNG\PurchaseGateway\Application\Services\Event\RocketgateCCPurchaseImportEvent;
use ProBillerNG\PurchaseGateway\Application\Services\Event\RocketgateCheckPurchaseImportEvent;
use ProBillerNG\PurchaseGateway\Domain\Model\AddonId;
use ProBillerNG\PurchaseGateway\Domain\Model\AddonType;
use ProBillerNG\PurchaseGateway\Domain\Model\Bundle;
use ProBillerNG\PurchaseGateway\Domain\Model\BundleId;
use ProBillerNG\PurchaseGateway\Domain\Model\ChequePaymentInfo;
use ProBillerNG\PurchaseGateway\Domain\Model\Event\PurchaseProcessed;
use ProBillerNG\PurchaseGateway\Domain\Model\OtherPaymentTypeInfo;
use ProBillerNG\PurchaseGateway\Infrastructure\Domain\Services\Transaction\Response\NewCCTransactionInformation;
use ProBillerNG\PurchaseGateway\Infrastructure\Domain\Services\Transaction\Response\EpochCCRetrieveTransactionResult;
use ProBillerNG\PurchaseGateway\Infrastructure\Domain\Services\Transaction\Response\EpochOtherPaymentTypeRetrieveTransactionResult;
use ProBillerNG\PurchaseGateway\Infrastructure\Domain\Services\Transaction\Response\MemberInformation;
use ProBillerNG\PurchaseGateway\Domain\Model\EpochBillerFields as PGWEpochBillerFields;
use ReflectionClass;
use ReflectionProperty;
use Tests\IntegrationTestCase;

class PurchaseIntegrationEventBuilderTest extends IntegrationTestCase
{
    /**
     * @var PurchaseProcessed
     */
    private $purchaseProcessed;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->purchaseProcessed = PurchaseProcessed::createFromJson(json_encode($this->createPurchaseProcessedWithRocketgateNewPaymentEventData()));
    }

    /**
     * @test
     * @throws \ProBillerNG\Logger\Exception
     * @throws CannotCreateIntegrationEventException
     * @throws \Exception
     */
    public function it_should_return_a_rocketgate_event()
    {
        $event = PurchaseIntegrationEventBuilder::build(
            $this->createRocketgateCCRetrieveTransactionResultMocks(),
            $this->purchaseProcessed
        );

        $this->assertInstanceOf(RocketgateCCPurchaseImportEvent::class, $event);
    }

    /**
     * @test
     * @throws \ProBillerNG\Logger\Exception
     * @throws CannotCreateIntegrationEventException
     * @throws \Exception
     */
    public function it_should_return_a_rocketgate_check_purchase_event(): RocketgateCheckPurchaseImportEvent
    {
        $event = PurchaseIntegrationEventBuilder::build(
            $this->createRocketgateCheckRetrieveTransactionResultMocks(),
            $this->purchaseProcessed
        );

        $this->assertInstanceOf(RocketgateCheckPurchaseImportEvent::class, $event);

        return $event;
    }

    /**
     * @param RocketgateCheckPurchaseImportEvent $event
     * @depends it_should_return_a_rocketgate_check_purchase_event
     * @throws \ProBillerNG\Logger\Exception
     * @throws \ProBillerNG\PurchaseGateway\Domain\Model\Exception\InvalidPaymentInfoException
     * @throws \ProBillerNG\PurchaseGateway\Domain\Model\Exception\UnsupportedPaymentMethodException
     * @throws \ProBillerNG\PurchaseGateway\Domain\Model\Exception\UnsupportedPaymentTypeException
     */
    public function rocketgate_check_purchase_event_should_not_contain_check_payment_info_fields(RocketgateCheckPurchaseImportEvent $event)
    {
        $checkPaymentInfo = ChequePaymentInfo::create(
            '12345',
            '765432',
            false,
            '5432',
            ChequePaymentInfo::PAYMENT_TYPE,
            ChequePaymentInfo::PAYMENT_METHOD
        );

        $success     = true;

        foreach ($checkPaymentInfo->toArray() as $k => $v) {
            if (array_key_exists($k, $event->toArray())) {
                $success = false;
                break;
            }
        }

        $this->assertTrue($success);
    }

    /**
     * @test
     * @throws \ProBillerNG\Logger\Exception
     * @throws CannotCreateIntegrationEventException
     * @throws \Exception
     */
    public function it_should_return_a_3ds_rocketgate_event()
    {
        $event = PurchaseIntegrationEventBuilder::build(
            $this->createRocketgateCCRetrieveTransactionResultMocks(null, null, null, [], true),
            $this->purchaseProcessed
        );

        $this->assertInstanceOf(RocketgateCC3DSPurchaseImportEvent::class, $event);
    }

    /**
     * @test
     * @throws \ProBillerNG\Logger\Exception
     * @throws CannotCreateIntegrationEventException
     * @throws \Exception
     */
    public function it_should_return_a_3ds2_rocketgate_event()
    {
        $event = PurchaseIntegrationEventBuilder::build(
            $this->createRocketgateCCRetrieveTransactionResultMocks(null, null, null, [], true, null, null, 2),
            $this->purchaseProcessed
        );

        $this->assertInstanceOf(RocketgateCC3DS2PurchaseImportEvent::class, $event);
    }

    /**
     * @test
     */
    public function it_should_return_a_netbilling_event()
    {
        //TODO
        $this->markTestIncomplete();
    }


    /**
     * @test
     * @throws \ProBillerNG\Logger\Exception
     * @throws CannotCreateIntegrationEventException
     * @throws \Exception
     */
    public function build_should_return_a_epoch_cc_event(): void
    {
        $event = PurchaseIntegrationEventBuilder::build(
            $this->epochCCRetrieveTransactionResult(),
            $this->purchaseProcessed
        );

        $this->assertInstanceOf(EpochCCPurchaseImportEvent::class, $event);
    }

    /**
     * @test
     * @throws \ProBillerNG\Logger\Exception
     * @throws CannotCreateIntegrationEventException
     * @throws \Exception
     */
    public function build_should_return_a_epoch_other_payment_event(): void
    {
        $event = PurchaseIntegrationEventBuilder::build(
            $this->epochOtherPaymentTypeRetrieveTransactionResult(),
            $this->purchaseProcessed
        );

        $this->assertInstanceOf(EpochOtherPaymentPurchaseImportEvent::class, $event);
    }


    /**
     * @test
     * @throws \ProBillerNG\Logger\Exception
     * @throws CannotCreateIntegrationEventException
     * @throws \Exception
     */
    public function buildItem_should_return_a_epoch_item(): void
    {
        $eventItem = PurchaseIntegrationEventBuilder::buildItem(
            array_merge(
                $this->purchaseProcessed->toArray(),
                ['state' => $this->purchaseProcessed->lastTransaction()['state']]
            ),
            $this->epochCCRetrieveTransactionResult(),
            Bundle::create(
                BundleId::createFromString($this->faker->uuid),
                true,
                AddonId::createFromString($this->faker->uuid),
                AddonType::create(AddonType::CONTENT)
            )
        );

        $this->assertInstanceOf(EpochPurchasedItemDetails::class, $eventItem);
    }

    /**
     * @return  EpochCCRetrieveTransactionResult
     * @throws \Exception
     */
    private function epochCCRetrieveTransactionResult(): EpochCCRetrieveTransactionResult
    {
        $retrieveTransaction = $this->createRetrieveEpochTransaction();

        return new EpochCCRetrieveTransactionResult(
            $retrieveTransaction,
            new MemberInformation($retrieveTransaction),
            new NewCCTransactionInformation($retrieveTransaction),
            PGWEpochBillerFields::create(
                'clientId',
                'clientKey',
                'clientVerificationKey'
            )
        );
    }

    /**
     * @return  EpochOtherPaymentTypeRetrieveTransactionResult
     * @throws \Exception
     */
    private function epochOtherPaymentTypeRetrieveTransactionResult(): EpochOtherPaymentTypeRetrieveTransactionResult
    {
        $retrieveTransaction = $this->createRetrieveEpochTransaction(OtherPaymentTypeInfo::PAYMENT_TYPES[0]);

        return new EpochOtherPaymentTypeRetrieveTransactionResult(
            $retrieveTransaction,
            new MemberInformation($retrieveTransaction),
            new NewCCTransactionInformation($retrieveTransaction),
            PGWEpochBillerFields::create(
                'clientId',
                'clientKey',
                'clientVerificationKey'
            )
        );
    }
}